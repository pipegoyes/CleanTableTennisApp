//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.4.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

export interface IClient {
    getDoubleScore(doubleMatchIdEncoded: string): Observable<ScoreDto[]>;
    updateDoubleScore(command: UpdateDoubleMatchScoreCommand): Observable<boolean>;
    finishTeamMatch(command: FinishTeamMatchCommand): Observable<boolean>;
    getOverviewDto(query: GetOverviewQuery): Observable<OverviewDto>;
    getScore(matchIdEncoded: string): Observable<ScoreDto[]>;
    updateScore(command: UpdateMatchScoreCommand): Observable<boolean>;
    createTeamMatch(command: CreateTeamMatchCommand): Observable<TeamMatch>;
    getTeamMatches(teamMatchIdEncoded: string | null | undefined): Observable<TeamMatchDto[]>;
}

@Injectable({
    providedIn: 'root'
})
export class Client implements IClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    getDoubleScore(doubleMatchIdEncoded: string): Observable<ScoreDto[]> {
        let url_ = this.baseUrl + "/double-score/{doubleMatchIdEncoded}";
        if (doubleMatchIdEncoded === undefined || doubleMatchIdEncoded === null)
            throw new Error("The parameter 'doubleMatchIdEncoded' must be defined.");
        url_ = url_.replace("{doubleMatchIdEncoded}", encodeURIComponent("" + doubleMatchIdEncoded));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDoubleScore(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDoubleScore(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ScoreDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ScoreDto[]>;
        }));
    }

    protected processGetDoubleScore(response: HttpResponseBase): Observable<ScoreDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ScoreDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ScoreDto[]>(null as any);
    }

    updateDoubleScore(command: UpdateDoubleMatchScoreCommand): Observable<boolean> {
        let url_ = this.baseUrl + "/double-score";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateDoubleScore(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateDoubleScore(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<boolean>;
                }
            } else
                return _observableThrow(response_) as any as Observable<boolean>;
        }));
    }

    protected processUpdateDoubleScore(response: HttpResponseBase): Observable<boolean> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ValidationFailure.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<boolean>(null as any);
    }

    finishTeamMatch(command: FinishTeamMatchCommand): Observable<boolean> {
        let url_ = this.baseUrl + "/overview";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processFinishTeamMatch(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processFinishTeamMatch(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<boolean>;
                }
            } else
                return _observableThrow(response_) as any as Observable<boolean>;
        }));
    }

    protected processFinishTeamMatch(response: HttpResponseBase): Observable<boolean> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 201) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result201 = resultData201 !== undefined ? resultData201 : <any>null;
    
            return _observableOf(result201);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ValidationFailure.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<boolean>(null as any);
    }

    getOverviewDto(query: GetOverviewQuery): Observable<OverviewDto> {
        let url_ = this.baseUrl + "/overview";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetOverviewDto(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetOverviewDto(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<OverviewDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<OverviewDto>;
        }));
    }

    protected processGetOverviewDto(response: HttpResponseBase): Observable<OverviewDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = OverviewDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<OverviewDto>(null as any);
    }

    getScore(matchIdEncoded: string): Observable<ScoreDto[]> {
        let url_ = this.baseUrl + "/score/{matchIdEncoded}";
        if (matchIdEncoded === undefined || matchIdEncoded === null)
            throw new Error("The parameter 'matchIdEncoded' must be defined.");
        url_ = url_.replace("{matchIdEncoded}", encodeURIComponent("" + matchIdEncoded));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetScore(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetScore(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ScoreDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ScoreDto[]>;
        }));
    }

    protected processGetScore(response: HttpResponseBase): Observable<ScoreDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ScoreDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ScoreDto[]>(null as any);
    }

    updateScore(command: UpdateMatchScoreCommand): Observable<boolean> {
        let url_ = this.baseUrl + "/score";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateScore(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateScore(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<boolean>;
                }
            } else
                return _observableThrow(response_) as any as Observable<boolean>;
        }));
    }

    protected processUpdateScore(response: HttpResponseBase): Observable<boolean> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ValidationFailure.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<boolean>(null as any);
    }

    createTeamMatch(command: CreateTeamMatchCommand): Observable<TeamMatch> {
        let url_ = this.baseUrl + "/team-match";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateTeamMatch(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateTeamMatch(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<TeamMatch>;
                }
            } else
                return _observableThrow(response_) as any as Observable<TeamMatch>;
        }));
    }

    protected processCreateTeamMatch(response: HttpResponseBase): Observable<TeamMatch> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 201) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = TeamMatch.fromJS(resultData201);
            return _observableOf(result201);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ValidationFailure.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<TeamMatch>(null as any);
    }

    getTeamMatches(teamMatchIdEncoded: string | null | undefined): Observable<TeamMatchDto[]> {
        let url_ = this.baseUrl + "/team-match?";
        if (teamMatchIdEncoded !== undefined && teamMatchIdEncoded !== null)
            url_ += "teamMatchIdEncoded=" + encodeURIComponent("" + teamMatchIdEncoded) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetTeamMatches(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetTeamMatches(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<TeamMatchDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<TeamMatchDto[]>;
        }));
    }

    protected processGetTeamMatches(response: HttpResponseBase): Observable<TeamMatchDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(TeamMatchDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<TeamMatchDto[]>(null as any);
    }
}

export class ScoreDto implements IScoreDto {
    scoreIdEncoded?: string;
    hostPoints?: number;
    guestPoints?: number;

    constructor(data?: IScoreDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.scoreIdEncoded = _data["scoreIdEncoded"];
            this.hostPoints = _data["hostPoints"];
            this.guestPoints = _data["guestPoints"];
        }
    }

    static fromJS(data: any): ScoreDto {
        data = typeof data === 'object' ? data : {};
        let result = new ScoreDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["scoreIdEncoded"] = this.scoreIdEncoded;
        data["hostPoints"] = this.hostPoints;
        data["guestPoints"] = this.guestPoints;
        return data;
    }
}

export interface IScoreDto {
    scoreIdEncoded?: string;
    hostPoints?: number;
    guestPoints?: number;
}

export class ValidationFailure implements IValidationFailure {
    propertyName?: string | undefined;
    errorMessage?: string | undefined;
    attemptedValue?: any | undefined;
    customState?: any | undefined;
    severity?: Severity;
    errorCode?: string | undefined;
    formattedMessagePlaceholderValues?: { [key: string]: any; } | undefined;

    constructor(data?: IValidationFailure) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.propertyName = _data["propertyName"];
            this.errorMessage = _data["errorMessage"];
            this.attemptedValue = _data["attemptedValue"];
            this.customState = _data["customState"];
            this.severity = _data["severity"];
            this.errorCode = _data["errorCode"];
            if (_data["formattedMessagePlaceholderValues"]) {
                this.formattedMessagePlaceholderValues = {} as any;
                for (let key in _data["formattedMessagePlaceholderValues"]) {
                    if (_data["formattedMessagePlaceholderValues"].hasOwnProperty(key))
                        (<any>this.formattedMessagePlaceholderValues)![key] = _data["formattedMessagePlaceholderValues"][key];
                }
            }
        }
    }

    static fromJS(data: any): ValidationFailure {
        data = typeof data === 'object' ? data : {};
        let result = new ValidationFailure();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["propertyName"] = this.propertyName;
        data["errorMessage"] = this.errorMessage;
        data["attemptedValue"] = this.attemptedValue;
        data["customState"] = this.customState;
        data["severity"] = this.severity;
        data["errorCode"] = this.errorCode;
        if (this.formattedMessagePlaceholderValues) {
            data["formattedMessagePlaceholderValues"] = {};
            for (let key in this.formattedMessagePlaceholderValues) {
                if (this.formattedMessagePlaceholderValues.hasOwnProperty(key))
                    (<any>data["formattedMessagePlaceholderValues"])[key] = (<any>this.formattedMessagePlaceholderValues)[key];
            }
        }
        return data;
    }
}

export interface IValidationFailure {
    propertyName?: string | undefined;
    errorMessage?: string | undefined;
    attemptedValue?: any | undefined;
    customState?: any | undefined;
    severity?: Severity;
    errorCode?: string | undefined;
    formattedMessagePlaceholderValues?: { [key: string]: any; } | undefined;
}

export enum Severity {
    Error = 0,
    Warning = 1,
    Info = 2,
}

export class UpdateDoubleMatchScoreCommand implements IUpdateDoubleMatchScoreCommand {
    doubleMatchIdEncoded?: string;
    scoreDtos?: ScoreDto[];

    constructor(data?: IUpdateDoubleMatchScoreCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.doubleMatchIdEncoded = _data["doubleMatchIdEncoded"];
            if (Array.isArray(_data["scoreDtos"])) {
                this.scoreDtos = [] as any;
                for (let item of _data["scoreDtos"])
                    this.scoreDtos!.push(ScoreDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UpdateDoubleMatchScoreCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateDoubleMatchScoreCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["doubleMatchIdEncoded"] = this.doubleMatchIdEncoded;
        if (Array.isArray(this.scoreDtos)) {
            data["scoreDtos"] = [];
            for (let item of this.scoreDtos)
                data["scoreDtos"].push(item.toJSON());
        }
        return data;
    }
}

export interface IUpdateDoubleMatchScoreCommand {
    doubleMatchIdEncoded?: string;
    scoreDtos?: ScoreDto[];
}

export class FinishTeamMatchCommand implements IFinishTeamMatchCommand {
    teamMatchIdEncoded?: string;

    constructor(data?: IFinishTeamMatchCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.teamMatchIdEncoded = _data["teamMatchIdEncoded"];
        }
    }

    static fromJS(data: any): FinishTeamMatchCommand {
        data = typeof data === 'object' ? data : {};
        let result = new FinishTeamMatchCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["teamMatchIdEncoded"] = this.teamMatchIdEncoded;
        return data;
    }
}

export interface IFinishTeamMatchCommand {
    teamMatchIdEncoded?: string;
}

export class OverviewDto implements IOverviewDto {
    overviewSingleMatchDtos?: OverviewSingleMatchDto[];
    overviewDoubleMatchDtos?: OverviewDoubleMatchDto[];

    constructor(data?: IOverviewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["overviewSingleMatchDtos"])) {
                this.overviewSingleMatchDtos = [] as any;
                for (let item of _data["overviewSingleMatchDtos"])
                    this.overviewSingleMatchDtos!.push(OverviewSingleMatchDto.fromJS(item));
            }
            if (Array.isArray(_data["overviewDoubleMatchDtos"])) {
                this.overviewDoubleMatchDtos = [] as any;
                for (let item of _data["overviewDoubleMatchDtos"])
                    this.overviewDoubleMatchDtos!.push(OverviewDoubleMatchDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): OverviewDto {
        data = typeof data === 'object' ? data : {};
        let result = new OverviewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.overviewSingleMatchDtos)) {
            data["overviewSingleMatchDtos"] = [];
            for (let item of this.overviewSingleMatchDtos)
                data["overviewSingleMatchDtos"].push(item.toJSON());
        }
        if (Array.isArray(this.overviewDoubleMatchDtos)) {
            data["overviewDoubleMatchDtos"] = [];
            for (let item of this.overviewDoubleMatchDtos)
                data["overviewDoubleMatchDtos"].push(item.toJSON());
        }
        return data;
    }
}

export interface IOverviewDto {
    overviewSingleMatchDtos?: OverviewSingleMatchDto[];
    overviewDoubleMatchDtos?: OverviewDoubleMatchDto[];
}

export class OverviewSingleMatchDto implements IOverviewSingleMatchDto {
    matchIdEncoded?: string;
    hostPlayerName?: string;
    guestPlayerName?: string;
    hostPoints?: number;
    guestPoints?: number;
    playingOrder?: PlayingOrder;
    scoresDtos?: ScoreDto[];

    constructor(data?: IOverviewSingleMatchDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.matchIdEncoded = _data["matchIdEncoded"];
            this.hostPlayerName = _data["hostPlayerName"];
            this.guestPlayerName = _data["guestPlayerName"];
            this.hostPoints = _data["hostPoints"];
            this.guestPoints = _data["guestPoints"];
            this.playingOrder = _data["playingOrder"];
            if (Array.isArray(_data["scoresDtos"])) {
                this.scoresDtos = [] as any;
                for (let item of _data["scoresDtos"])
                    this.scoresDtos!.push(ScoreDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): OverviewSingleMatchDto {
        data = typeof data === 'object' ? data : {};
        let result = new OverviewSingleMatchDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["matchIdEncoded"] = this.matchIdEncoded;
        data["hostPlayerName"] = this.hostPlayerName;
        data["guestPlayerName"] = this.guestPlayerName;
        data["hostPoints"] = this.hostPoints;
        data["guestPoints"] = this.guestPoints;
        data["playingOrder"] = this.playingOrder;
        if (Array.isArray(this.scoresDtos)) {
            data["scoresDtos"] = [];
            for (let item of this.scoresDtos)
                data["scoresDtos"].push(item.toJSON());
        }
        return data;
    }
}

export interface IOverviewSingleMatchDto {
    matchIdEncoded?: string;
    hostPlayerName?: string;
    guestPlayerName?: string;
    hostPoints?: number;
    guestPoints?: number;
    playingOrder?: PlayingOrder;
    scoresDtos?: ScoreDto[];
}

export enum PlayingOrder {
    First = 1,
    Second = 2,
    Third = 3,
    Fourth = 4,
    Fifth = 5,
    Sixth = 6,
    Seventh = 7,
    Eighth = 8,
    Nine = 9,
    Tenth = 10,
}

export class OverviewDoubleMatchDto implements IOverviewDoubleMatchDto {
    matchIdEncoded?: string;
    hostLeftPlayerName?: string;
    hostRightPlayerName?: string;
    guestLeftPlayerName?: string;
    guestRightPlayerName?: string;
    hostPoints?: number;
    guestPoints?: number;
    playingOrder?: PlayingOrder;
    scoresDtos?: ScoreDto[];

    constructor(data?: IOverviewDoubleMatchDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.matchIdEncoded = _data["matchIdEncoded"];
            this.hostLeftPlayerName = _data["hostLeftPlayerName"];
            this.hostRightPlayerName = _data["hostRightPlayerName"];
            this.guestLeftPlayerName = _data["guestLeftPlayerName"];
            this.guestRightPlayerName = _data["guestRightPlayerName"];
            this.hostPoints = _data["hostPoints"];
            this.guestPoints = _data["guestPoints"];
            this.playingOrder = _data["playingOrder"];
            if (Array.isArray(_data["scoresDtos"])) {
                this.scoresDtos = [] as any;
                for (let item of _data["scoresDtos"])
                    this.scoresDtos!.push(ScoreDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): OverviewDoubleMatchDto {
        data = typeof data === 'object' ? data : {};
        let result = new OverviewDoubleMatchDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["matchIdEncoded"] = this.matchIdEncoded;
        data["hostLeftPlayerName"] = this.hostLeftPlayerName;
        data["hostRightPlayerName"] = this.hostRightPlayerName;
        data["guestLeftPlayerName"] = this.guestLeftPlayerName;
        data["guestRightPlayerName"] = this.guestRightPlayerName;
        data["hostPoints"] = this.hostPoints;
        data["guestPoints"] = this.guestPoints;
        data["playingOrder"] = this.playingOrder;
        if (Array.isArray(this.scoresDtos)) {
            data["scoresDtos"] = [];
            for (let item of this.scoresDtos)
                data["scoresDtos"].push(item.toJSON());
        }
        return data;
    }
}

export interface IOverviewDoubleMatchDto {
    matchIdEncoded?: string;
    hostLeftPlayerName?: string;
    hostRightPlayerName?: string;
    guestLeftPlayerName?: string;
    guestRightPlayerName?: string;
    hostPoints?: number;
    guestPoints?: number;
    playingOrder?: PlayingOrder;
    scoresDtos?: ScoreDto[];
}

export class GetOverviewQuery implements IGetOverviewQuery {
    teamMatchIdEncoded?: string;

    constructor(data?: IGetOverviewQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.teamMatchIdEncoded = _data["teamMatchIdEncoded"];
        }
    }

    static fromJS(data: any): GetOverviewQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetOverviewQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["teamMatchIdEncoded"] = this.teamMatchIdEncoded;
        return data;
    }
}

export interface IGetOverviewQuery {
    teamMatchIdEncoded?: string;
}

export class UpdateMatchScoreCommand implements IUpdateMatchScoreCommand {
    matchIdEncoded?: string;
    teamMatchIdEncoded?: string;
    scoreDtos?: ScoreDto[];

    constructor(data?: IUpdateMatchScoreCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.matchIdEncoded = _data["matchIdEncoded"];
            this.teamMatchIdEncoded = _data["teamMatchIdEncoded"];
            if (Array.isArray(_data["scoreDtos"])) {
                this.scoreDtos = [] as any;
                for (let item of _data["scoreDtos"])
                    this.scoreDtos!.push(ScoreDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UpdateMatchScoreCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateMatchScoreCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["matchIdEncoded"] = this.matchIdEncoded;
        data["teamMatchIdEncoded"] = this.teamMatchIdEncoded;
        if (Array.isArray(this.scoreDtos)) {
            data["scoreDtos"] = [];
            for (let item of this.scoreDtos)
                data["scoreDtos"].push(item.toJSON());
        }
        return data;
    }
}

export interface IUpdateMatchScoreCommand {
    matchIdEncoded?: string;
    teamMatchIdEncoded?: string;
    scoreDtos?: ScoreDto[];
}

export abstract class AuditableEntity implements IAuditableEntity {
    created?: Date;
    createdBy?: string | undefined;
    lastModified?: Date | undefined;
    lastModifiedBy?: string | undefined;

    constructor(data?: IAuditableEntity) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.created = _data["created"] ? new Date(_data["created"].toString()) : <any>undefined;
            this.createdBy = _data["createdBy"];
            this.lastModified = _data["lastModified"] ? new Date(_data["lastModified"].toString()) : <any>undefined;
            this.lastModifiedBy = _data["lastModifiedBy"];
        }
    }

    static fromJS(data: any): AuditableEntity {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'AuditableEntity' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["created"] = this.created ? this.created.toISOString() : <any>undefined;
        data["createdBy"] = this.createdBy;
        data["lastModified"] = this.lastModified ? this.lastModified.toISOString() : <any>undefined;
        data["lastModifiedBy"] = this.lastModifiedBy;
        return data;
    }
}

export interface IAuditableEntity {
    created?: Date;
    createdBy?: string | undefined;
    lastModified?: Date | undefined;
    lastModifiedBy?: string | undefined;
}

export class TeamMatch extends AuditableEntity implements ITeamMatch {
    id?: number;
    hostTeam?: Team;
    guestTeam?: Team;
    finishedAt?: Date | undefined;
    singleMatches?: SingleMatch[];
    doubleMatches?: DoubleMatch[];

    constructor(data?: ITeamMatch) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"];
            this.hostTeam = _data["hostTeam"] ? Team.fromJS(_data["hostTeam"]) : <any>undefined;
            this.guestTeam = _data["guestTeam"] ? Team.fromJS(_data["guestTeam"]) : <any>undefined;
            this.finishedAt = _data["finishedAt"] ? new Date(_data["finishedAt"].toString()) : <any>undefined;
            if (Array.isArray(_data["singleMatches"])) {
                this.singleMatches = [] as any;
                for (let item of _data["singleMatches"])
                    this.singleMatches!.push(SingleMatch.fromJS(item));
            }
            if (Array.isArray(_data["doubleMatches"])) {
                this.doubleMatches = [] as any;
                for (let item of _data["doubleMatches"])
                    this.doubleMatches!.push(DoubleMatch.fromJS(item));
            }
        }
    }

    static fromJS(data: any): TeamMatch {
        data = typeof data === 'object' ? data : {};
        let result = new TeamMatch();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["hostTeam"] = this.hostTeam ? this.hostTeam.toJSON() : <any>undefined;
        data["guestTeam"] = this.guestTeam ? this.guestTeam.toJSON() : <any>undefined;
        data["finishedAt"] = this.finishedAt ? this.finishedAt.toISOString() : <any>undefined;
        if (Array.isArray(this.singleMatches)) {
            data["singleMatches"] = [];
            for (let item of this.singleMatches)
                data["singleMatches"].push(item.toJSON());
        }
        if (Array.isArray(this.doubleMatches)) {
            data["doubleMatches"] = [];
            for (let item of this.doubleMatches)
                data["doubleMatches"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export interface ITeamMatch extends IAuditableEntity {
    id?: number;
    hostTeam?: Team;
    guestTeam?: Team;
    finishedAt?: Date | undefined;
    singleMatches?: SingleMatch[];
    doubleMatches?: DoubleMatch[];
}

export class Team extends AuditableEntity implements ITeam {
    id?: number;
    name?: string;
    players?: Player[];

    constructor(data?: ITeam) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            if (Array.isArray(_data["players"])) {
                this.players = [] as any;
                for (let item of _data["players"])
                    this.players!.push(Player.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Team {
        data = typeof data === 'object' ? data : {};
        let result = new Team();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        if (Array.isArray(this.players)) {
            data["players"] = [];
            for (let item of this.players)
                data["players"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export interface ITeam extends IAuditableEntity {
    id?: number;
    name?: string;
    players?: Player[];
}

export class Player extends AuditableEntity implements IPlayer {
    id?: number;
    name?: string;
    teamId?: number;

    constructor(data?: IPlayer) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.teamId = _data["teamId"];
        }
    }

    static fromJS(data: any): Player {
        data = typeof data === 'object' ? data : {};
        let result = new Player();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["teamId"] = this.teamId;
        super.toJSON(data);
        return data;
    }
}

export interface IPlayer extends IAuditableEntity {
    id?: number;
    name?: string;
    teamId?: number;
}

export class SingleMatch extends AuditableEntity implements ISingleMatch {
    id?: number;
    hostPlayer?: Player;
    guestPlayer?: Player;
    teamMatch?: TeamMatch;
    playingOrder?: PlayingOrder;
    scores?: Score[];

    constructor(data?: ISingleMatch) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"];
            this.hostPlayer = _data["hostPlayer"] ? Player.fromJS(_data["hostPlayer"]) : <any>undefined;
            this.guestPlayer = _data["guestPlayer"] ? Player.fromJS(_data["guestPlayer"]) : <any>undefined;
            this.teamMatch = _data["teamMatch"] ? TeamMatch.fromJS(_data["teamMatch"]) : <any>undefined;
            this.playingOrder = _data["playingOrder"];
            if (Array.isArray(_data["scores"])) {
                this.scores = [] as any;
                for (let item of _data["scores"])
                    this.scores!.push(Score.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SingleMatch {
        data = typeof data === 'object' ? data : {};
        let result = new SingleMatch();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["hostPlayer"] = this.hostPlayer ? this.hostPlayer.toJSON() : <any>undefined;
        data["guestPlayer"] = this.guestPlayer ? this.guestPlayer.toJSON() : <any>undefined;
        data["teamMatch"] = this.teamMatch ? this.teamMatch.toJSON() : <any>undefined;
        data["playingOrder"] = this.playingOrder;
        if (Array.isArray(this.scores)) {
            data["scores"] = [];
            for (let item of this.scores)
                data["scores"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export interface ISingleMatch extends IAuditableEntity {
    id?: number;
    hostPlayer?: Player;
    guestPlayer?: Player;
    teamMatch?: TeamMatch;
    playingOrder?: PlayingOrder;
    scores?: Score[];
}

export class Score implements IScore {
    id?: number;
    gamePointsHost?: number;
    gamePointsGuest?: number;
    match?: SingleMatch | undefined;

    constructor(data?: IScore) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.gamePointsHost = _data["gamePointsHost"];
            this.gamePointsGuest = _data["gamePointsGuest"];
            this.match = _data["match"] ? SingleMatch.fromJS(_data["match"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Score {
        data = typeof data === 'object' ? data : {};
        let result = new Score();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["gamePointsHost"] = this.gamePointsHost;
        data["gamePointsGuest"] = this.gamePointsGuest;
        data["match"] = this.match ? this.match.toJSON() : <any>undefined;
        return data;
    }
}

export interface IScore {
    id?: number;
    gamePointsHost?: number;
    gamePointsGuest?: number;
    match?: SingleMatch | undefined;
}

export class DoubleMatch extends AuditableEntity implements IDoubleMatch {
    id?: number;
    hostPlayerRight?: Player;
    hostPlayerLeft?: Player;
    guestPlayerRight?: Player;
    guestPlayerLeft?: Player;
    teamMatchId?: number;
    playingOrder?: PlayingOrder;
    scores?: DoubleMatchScore[];

    constructor(data?: IDoubleMatch) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"];
            this.hostPlayerRight = _data["hostPlayerRight"] ? Player.fromJS(_data["hostPlayerRight"]) : <any>undefined;
            this.hostPlayerLeft = _data["hostPlayerLeft"] ? Player.fromJS(_data["hostPlayerLeft"]) : <any>undefined;
            this.guestPlayerRight = _data["guestPlayerRight"] ? Player.fromJS(_data["guestPlayerRight"]) : <any>undefined;
            this.guestPlayerLeft = _data["guestPlayerLeft"] ? Player.fromJS(_data["guestPlayerLeft"]) : <any>undefined;
            this.teamMatchId = _data["teamMatchId"];
            this.playingOrder = _data["playingOrder"];
            if (Array.isArray(_data["scores"])) {
                this.scores = [] as any;
                for (let item of _data["scores"])
                    this.scores!.push(DoubleMatchScore.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DoubleMatch {
        data = typeof data === 'object' ? data : {};
        let result = new DoubleMatch();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["hostPlayerRight"] = this.hostPlayerRight ? this.hostPlayerRight.toJSON() : <any>undefined;
        data["hostPlayerLeft"] = this.hostPlayerLeft ? this.hostPlayerLeft.toJSON() : <any>undefined;
        data["guestPlayerRight"] = this.guestPlayerRight ? this.guestPlayerRight.toJSON() : <any>undefined;
        data["guestPlayerLeft"] = this.guestPlayerLeft ? this.guestPlayerLeft.toJSON() : <any>undefined;
        data["teamMatchId"] = this.teamMatchId;
        data["playingOrder"] = this.playingOrder;
        if (Array.isArray(this.scores)) {
            data["scores"] = [];
            for (let item of this.scores)
                data["scores"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export interface IDoubleMatch extends IAuditableEntity {
    id?: number;
    hostPlayerRight?: Player;
    hostPlayerLeft?: Player;
    guestPlayerRight?: Player;
    guestPlayerLeft?: Player;
    teamMatchId?: number;
    playingOrder?: PlayingOrder;
    scores?: DoubleMatchScore[];
}

export class DoubleMatchScore implements IDoubleMatchScore {
    id?: number;
    gamePointsHost?: number;
    gamePointsGuest?: number;
    doubleMatch?: DoubleMatch | undefined;

    constructor(data?: IDoubleMatchScore) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.gamePointsHost = _data["gamePointsHost"];
            this.gamePointsGuest = _data["gamePointsGuest"];
            this.doubleMatch = _data["doubleMatch"] ? DoubleMatch.fromJS(_data["doubleMatch"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DoubleMatchScore {
        data = typeof data === 'object' ? data : {};
        let result = new DoubleMatchScore();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["gamePointsHost"] = this.gamePointsHost;
        data["gamePointsGuest"] = this.gamePointsGuest;
        data["doubleMatch"] = this.doubleMatch ? this.doubleMatch.toJSON() : <any>undefined;
        return data;
    }
}

export interface IDoubleMatchScore {
    id?: number;
    gamePointsHost?: number;
    gamePointsGuest?: number;
    doubleMatch?: DoubleMatch | undefined;
}

export class CreateTeamMatchCommand implements ICreateTeamMatchCommand {
    hostTeam?: TeamRequest;
    guestTeam?: TeamRequest;

    constructor(data?: ICreateTeamMatchCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.hostTeam = _data["hostTeam"] ? TeamRequest.fromJS(_data["hostTeam"]) : <any>undefined;
            this.guestTeam = _data["guestTeam"] ? TeamRequest.fromJS(_data["guestTeam"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CreateTeamMatchCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateTeamMatchCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hostTeam"] = this.hostTeam ? this.hostTeam.toJSON() : <any>undefined;
        data["guestTeam"] = this.guestTeam ? this.guestTeam.toJSON() : <any>undefined;
        return data;
    }
}

export interface ICreateTeamMatchCommand {
    hostTeam?: TeamRequest;
    guestTeam?: TeamRequest;
}

export class TeamRequest implements ITeamRequest {
    name?: string;
    players?: PlayerRequest[];

    constructor(data?: ITeamRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            if (Array.isArray(_data["players"])) {
                this.players = [] as any;
                for (let item of _data["players"])
                    this.players!.push(PlayerRequest.fromJS(item));
            }
        }
    }

    static fromJS(data: any): TeamRequest {
        data = typeof data === 'object' ? data : {};
        let result = new TeamRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        if (Array.isArray(this.players)) {
            data["players"] = [];
            for (let item of this.players)
                data["players"].push(item.toJSON());
        }
        return data;
    }
}

export interface ITeamRequest {
    name?: string;
    players?: PlayerRequest[];
}

export class PlayerRequest implements IPlayerRequest {
    fullName?: string;
    doublePosition?: DoublePosition;

    constructor(data?: IPlayerRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.fullName = _data["fullName"];
            this.doublePosition = _data["doublePosition"];
        }
    }

    static fromJS(data: any): PlayerRequest {
        data = typeof data === 'object' ? data : {};
        let result = new PlayerRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fullName"] = this.fullName;
        data["doublePosition"] = this.doublePosition;
        return data;
    }
}

export interface IPlayerRequest {
    fullName?: string;
    doublePosition?: DoublePosition;
}

export enum DoublePosition {
    None = 0,
    FirstDouble = 1,
    SecondDouble = 2,
}

export class TeamMatchDto implements ITeamMatchDto {
    hostTeamName?: string;
    guestTeamName?: string;
    startedAt?: Date;
    hostVictories?: number;
    guestVictories?: number;
    teamMatchIdEncoded?: string;

    constructor(data?: ITeamMatchDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.hostTeamName = _data["hostTeamName"];
            this.guestTeamName = _data["guestTeamName"];
            this.startedAt = _data["startedAt"] ? new Date(_data["startedAt"].toString()) : <any>undefined;
            this.hostVictories = _data["hostVictories"];
            this.guestVictories = _data["guestVictories"];
            this.teamMatchIdEncoded = _data["teamMatchIdEncoded"];
        }
    }

    static fromJS(data: any): TeamMatchDto {
        data = typeof data === 'object' ? data : {};
        let result = new TeamMatchDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hostTeamName"] = this.hostTeamName;
        data["guestTeamName"] = this.guestTeamName;
        data["startedAt"] = this.startedAt ? this.startedAt.toISOString() : <any>undefined;
        data["hostVictories"] = this.hostVictories;
        data["guestVictories"] = this.guestVictories;
        data["teamMatchIdEncoded"] = this.teamMatchIdEncoded;
        return data;
    }
}

export interface ITeamMatchDto {
    hostTeamName?: string;
    guestTeamName?: string;
    startedAt?: Date;
    hostVictories?: number;
    guestVictories?: number;
    teamMatchIdEncoded?: string;
}

export class SwaggerException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}